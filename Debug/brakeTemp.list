
brakeTemp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000339c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08003528  08003528  00004528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003770  08003770  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003770  08003770  00004770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003778  08003778  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003778  08003778  00004778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800377c  0800377c  0000477c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003780  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  0800378c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  0800378c  000050bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0b7  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203e  00000000  00000000  000110f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00013138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077a  00000000  00000000  00013b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f4c6  00000000  00000000  0001428a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cade  00000000  00000000  00033750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb597  00000000  00000000  0004022e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb7c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000266c  00000000  00000000  000fb808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000fde74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003510 	.word	0x08003510

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003510 	.word	0x08003510

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <sendData>:
#include "ct1000n.h"

// MASTER QUERY: DEVICE ID, FUNCTION CODE, REGISTER ADDR (2 BYTES), # OF POINTS TO READ (2 BYTES), CRC (2 BYTES)
// CONFIRM WE GET THE CORRECT ADDRESS

void sendData(uint8_t* data) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MAX485_EN_PORT, MAX485_EN_PIN, GPIO_PIN_SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2108      	movs	r1, #8
 80004c8:	480b      	ldr	r0, [pc, #44]	@ (80004f8 <sendData+0x3c>)
 80004ca:	f000 fdc9 	bl	8001060 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, data, 8, HAL_MAX_DELAY);
 80004ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004d2:	2208      	movs	r2, #8
 80004d4:	6879      	ldr	r1, [r7, #4]
 80004d6:	4809      	ldr	r0, [pc, #36]	@ (80004fc <sendData+0x40>)
 80004d8:	f001 ffac 	bl	8002434 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(MAX485_EN_PORT, MAX485_EN_PIN, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2108      	movs	r1, #8
 80004e0:	4805      	ldr	r0, [pc, #20]	@ (80004f8 <sendData+0x3c>)
 80004e2:	f000 fdbd 	bl	8001060 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80004e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004ea:	f000 fa9b 	bl	8000a24 <HAL_Delay>
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	48000400 	.word	0x48000400
 80004fc:	20000030 	.word	0x20000030

08000500 <computeCRC16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t computeCRC16(uint8_t *buf, uint16_t buffer_length)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 800050c:	23ff      	movs	r3, #255	@ 0xff
 800050e:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000510:	23ff      	movs	r3, #255	@ 0xff
 8000512:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8000514:	e013      	b.n	800053e <computeCRC16+0x3e>
        i = crc_lo ^ *buf++; /* calculate the CRC  */
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	1c5a      	adds	r2, r3, #1
 800051a:	607a      	str	r2, [r7, #4]
 800051c:	781a      	ldrb	r2, [r3, #0]
 800051e:	7bbb      	ldrb	r3, [r7, #14]
 8000520:	4053      	eors	r3, r2
 8000522:	b2db      	uxtb	r3, r3
 8000524:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8000526:	4a0f      	ldr	r2, [pc, #60]	@ (8000564 <computeCRC16+0x64>)
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	4413      	add	r3, r2
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	4053      	eors	r3, r2
 8000532:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8000534:	4a0c      	ldr	r2, [pc, #48]	@ (8000568 <computeCRC16+0x68>)
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	4413      	add	r3, r2
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 800053e:	887b      	ldrh	r3, [r7, #2]
 8000540:	1e5a      	subs	r2, r3, #1
 8000542:	807a      	strh	r2, [r7, #2]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d1e6      	bne.n	8000516 <computeCRC16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	021b      	lsls	r3, r3, #8
 800054c:	b21a      	sxth	r2, r3
 800054e:	7bbb      	ldrb	r3, [r7, #14]
 8000550:	b21b      	sxth	r3, r3
 8000552:	4313      	orrs	r3, r2
 8000554:	b21b      	sxth	r3, r3
 8000556:	b29b      	uxth	r3, r3
}
 8000558:	4618      	mov	r0, r3
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	08003528 	.word	0x08003528
 8000568:	08003628 	.word	0x08003628

0800056c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b17      	ldr	r3, [pc, #92]	@ (80005e0 <MX_GPIO_Init+0x74>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	4a16      	ldr	r2, [pc, #88]	@ (80005e0 <MX_GPIO_Init+0x74>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058e:	4b14      	ldr	r3, [pc, #80]	@ (80005e0 <MX_GPIO_Init+0x74>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <MX_GPIO_Init+0x74>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	4a10      	ldr	r2, [pc, #64]	@ (80005e0 <MX_GPIO_Init+0x74>)
 80005a0:	f043 0302 	orr.w	r3, r3, #2
 80005a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a6:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <MX_GPIO_Init+0x74>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX485_EN_GPIO_Port, MAX485_EN_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2108      	movs	r1, #8
 80005b6:	480b      	ldr	r0, [pc, #44]	@ (80005e4 <MX_GPIO_Init+0x78>)
 80005b8:	f000 fd52 	bl	8001060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAX485_EN_Pin;
 80005bc:	2308      	movs	r3, #8
 80005be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	2301      	movs	r3, #1
 80005c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MAX485_EN_GPIO_Port, &GPIO_InitStruct);
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	4619      	mov	r1, r3
 80005d2:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <MX_GPIO_Init+0x78>)
 80005d4:	f000 fbda 	bl	8000d8c <HAL_GPIO_Init>

}
 80005d8:	bf00      	nop
 80005da:	3720      	adds	r7, #32
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40021000 	.word	0x40021000
 80005e4:	48000400 	.word	0x48000400

080005e8 <main>:
uint8_t rxData[32];

void SystemClock_Config(void);

int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 f9a4 	bl	800093a <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f82d 	bl	8000650 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f7ff ffb9 	bl	800056c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005fa:	f000 f8e5 	bl	80007c8 <MX_USART1_UART_Init>

  // DEFINE txData, the Master Request
  txData[0] = 0x01;
 80005fe:	4b13      	ldr	r3, [pc, #76]	@ (800064c <main+0x64>)
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
  txData[1] = 0x03;
 8000604:	4b11      	ldr	r3, [pc, #68]	@ (800064c <main+0x64>)
 8000606:	2203      	movs	r2, #3
 8000608:	705a      	strb	r2, [r3, #1]
  txData[2] = 0;
 800060a:	4b10      	ldr	r3, [pc, #64]	@ (800064c <main+0x64>)
 800060c:	2200      	movs	r2, #0
 800060e:	709a      	strb	r2, [r3, #2]
  txData[3] = 0x02;
 8000610:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <main+0x64>)
 8000612:	2202      	movs	r2, #2
 8000614:	70da      	strb	r2, [r3, #3]
  txData[4] = 0;
 8000616:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <main+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	711a      	strb	r2, [r3, #4]
  txData[5] = 0x01;
 800061c:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <main+0x64>)
 800061e:	2201      	movs	r2, #1
 8000620:	715a      	strb	r2, [r3, #5]
  uint16_t crc = computeCRC16(txData, 6);
 8000622:	2106      	movs	r1, #6
 8000624:	4809      	ldr	r0, [pc, #36]	@ (800064c <main+0x64>)
 8000626:	f7ff ff6b 	bl	8000500 <computeCRC16>
 800062a:	4603      	mov	r3, r0
 800062c:	80fb      	strh	r3, [r7, #6]
  txData[6] = crc & 0xFF;
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <main+0x64>)
 8000634:	719a      	strb	r2, [r3, #6]
  txData[7] = (crc >> 8) & 0xFF;
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	b29b      	uxth	r3, r3
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4b03      	ldr	r3, [pc, #12]	@ (800064c <main+0x64>)
 8000640:	71da      	strb	r2, [r3, #7]
  // txData is now ready!

  while (1) {
	  sendData(txData);
 8000642:	4802      	ldr	r0, [pc, #8]	@ (800064c <main+0x64>)
 8000644:	f7ff ff3a 	bl	80004bc <sendData>
 8000648:	e7fb      	b.n	8000642 <main+0x5a>
 800064a:	bf00      	nop
 800064c:	20000028 	.word	0x20000028

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b096      	sub	sp, #88	@ 0x58
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	2244      	movs	r2, #68	@ 0x44
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f002 ff29 	bl	80034b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	463b      	mov	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000672:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000676:	f000 fd19 	bl	80010ac <HAL_PWREx_ControlVoltageScaling>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000680:	f000 f82c 	bl	80006dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000684:	2310      	movs	r3, #16
 8000686:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000690:	2360      	movs	r3, #96	@ 0x60
 8000692:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fd5b 	bl	8001158 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80006a8:	f000 f818 	bl	80006dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 f95b 	bl	8001980 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006d0:	f000 f804 	bl	80006dc <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3758      	adds	r7, #88	@ 0x58
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <Error_Handler+0x8>

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <HAL_MspInit+0x44>)
 80006f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006f2:	4a0e      	ldr	r2, [pc, #56]	@ (800072c <HAL_MspInit+0x44>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80006fa:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <HAL_MspInit+0x44>)
 80006fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <HAL_MspInit+0x44>)
 8000708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800070a:	4a08      	ldr	r2, [pc, #32]	@ (800072c <HAL_MspInit+0x44>)
 800070c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000710:	6593      	str	r3, [r2, #88]	@ 0x58
 8000712:	4b06      	ldr	r3, [pc, #24]	@ (800072c <HAL_MspInit+0x44>)
 8000714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <NMI_Handler+0x4>

08000738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <HardFault_Handler+0x4>

08000740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <MemManage_Handler+0x4>

08000748 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <BusFault_Handler+0x4>

08000750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <UsageFault_Handler+0x4>

08000758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000786:	f000 f92d 	bl	80009e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000794:	4802      	ldr	r0, [pc, #8]	@ (80007a0 <USART1_IRQHandler+0x10>)
 8000796:	f001 fed7 	bl	8002548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000030 	.word	0x20000030

080007a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <SystemInit+0x20>)
 80007aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ae:	4a05      	ldr	r2, [pc, #20]	@ (80007c4 <SystemInit+0x20>)
 80007b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007cc:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 80007ce:	4a15      	ldr	r2, [pc, #84]	@ (8000824 <MX_USART1_UART_Init+0x5c>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 80007d4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80007d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 800080c:	f001 fdc4 	bl	8002398 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000816:	f7ff ff61 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000030 	.word	0x20000030
 8000824:	40013800 	.word	0x40013800

08000828 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b09e      	sub	sp, #120	@ 0x78
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	2254      	movs	r2, #84	@ 0x54
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f002 fe34 	bl	80034b6 <memset>
  if(uartHandle->Instance==USART1)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a23      	ldr	r2, [pc, #140]	@ (80008e0 <HAL_UART_MspInit+0xb8>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d13f      	bne.n	80008d8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000858:	2301      	movs	r3, #1
 800085a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800085c:	2300      	movs	r3, #0
 800085e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4618      	mov	r0, r3
 8000866:	f001 faaf 	bl	8001dc8 <HAL_RCCEx_PeriphCLKConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000870:	f7ff ff34 	bl	80006dc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000874:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <HAL_UART_MspInit+0xbc>)
 8000876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000878:	4a1a      	ldr	r2, [pc, #104]	@ (80008e4 <HAL_UART_MspInit+0xbc>)
 800087a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800087e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000880:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <HAL_UART_MspInit+0xbc>)
 8000882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <HAL_UART_MspInit+0xbc>)
 800088e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000890:	4a14      	ldr	r2, [pc, #80]	@ (80008e4 <HAL_UART_MspInit+0xbc>)
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <HAL_UART_MspInit+0xbc>)
 800089a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008a4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008a8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008b6:	2307      	movs	r3, #7
 80008b8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008be:	4619      	mov	r1, r3
 80008c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c4:	f000 fa62 	bl	8000d8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2100      	movs	r1, #0
 80008cc:	2025      	movs	r0, #37	@ 0x25
 80008ce:	f000 f9a8 	bl	8000c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008d2:	2025      	movs	r0, #37	@ 0x25
 80008d4:	f000 f9c1 	bl	8000c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80008d8:	bf00      	nop
 80008da:	3778      	adds	r7, #120	@ 0x78
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40013800 	.word	0x40013800
 80008e4:	40021000 	.word	0x40021000

080008e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000920 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008ec:	f7ff ff5a 	bl	80007a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f0:	480c      	ldr	r0, [pc, #48]	@ (8000924 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f2:	490d      	ldr	r1, [pc, #52]	@ (8000928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f4:	4a0d      	ldr	r2, [pc, #52]	@ (800092c <LoopForever+0xe>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0a      	ldr	r2, [pc, #40]	@ (8000930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000908:	4c0a      	ldr	r4, [pc, #40]	@ (8000934 <LoopForever+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000916:	f002 fdd7 	bl	80034c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800091a:	f7ff fe65 	bl	80005e8 <main>

0800091e <LoopForever>:

LoopForever:
    b LoopForever
 800091e:	e7fe      	b.n	800091e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000920:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800092c:	08003780 	.word	0x08003780
  ldr r2, =_sbss
 8000930:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000934:	200000bc 	.word	0x200000bc

08000938 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC1_IRQHandler>

0800093a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000940:	2300      	movs	r3, #0
 8000942:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f961 	bl	8000c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800094a:	200f      	movs	r0, #15
 800094c:	f000 f80e 	bl	800096c <HAL_InitTick>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d002      	beq.n	800095c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	71fb      	strb	r3, [r7, #7]
 800095a:	e001      	b.n	8000960 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800095c:	f7ff fec4 	bl	80006e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000960:	79fb      	ldrb	r3, [r7, #7]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000974:	2300      	movs	r3, #0
 8000976:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000978:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <HAL_InitTick+0x6c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d023      	beq.n	80009c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000980:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <HAL_InitTick+0x70>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <HAL_InitTick+0x6c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4619      	mov	r1, r3
 800098a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800098e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000992:	fbb2 f3f3 	udiv	r3, r2, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f96d 	bl	8000c76 <HAL_SYSTICK_Config>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d10f      	bne.n	80009c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d809      	bhi.n	80009bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009b0:	f000 f937 	bl	8000c22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009b4:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <HAL_InitTick+0x74>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
 80009ba:	e007      	b.n	80009cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009bc:	2301      	movs	r3, #1
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	e004      	b.n	80009cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	73fb      	strb	r3, [r7, #15]
 80009c6:	e001      	b.n	80009cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000000 	.word	0x20000000
 80009e0:	20000004 	.word	0x20000004

080009e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <HAL_IncTick+0x20>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <HAL_IncTick+0x24>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4413      	add	r3, r2
 80009f4:	4a04      	ldr	r2, [pc, #16]	@ (8000a08 <HAL_IncTick+0x24>)
 80009f6:	6013      	str	r3, [r2, #0]
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000008 	.word	0x20000008
 8000a08:	200000b8 	.word	0x200000b8

08000a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a10:	4b03      	ldr	r3, [pc, #12]	@ (8000a20 <HAL_GetTick+0x14>)
 8000a12:	681b      	ldr	r3, [r3, #0]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	200000b8 	.word	0x200000b8

08000a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a2c:	f7ff ffee 	bl	8000a0c <HAL_GetTick>
 8000a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a3c:	d005      	beq.n	8000a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <HAL_Delay+0x44>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4413      	add	r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a4a:	bf00      	nop
 8000a4c:	f7ff ffde 	bl	8000a0c <HAL_GetTick>
 8000a50:	4602      	mov	r2, r0
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d8f7      	bhi.n	8000a4c <HAL_Delay+0x28>
  {
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000008 	.word	0x20000008

08000a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9e:	4a04      	ldr	r2, [pc, #16]	@ (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	60d3      	str	r3, [r2, #12]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab8:	4b04      	ldr	r3, [pc, #16]	@ (8000acc <__NVIC_GetPriorityGrouping+0x18>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	f003 0307 	and.w	r3, r3, #7
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	db0b      	blt.n	8000afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	f003 021f 	and.w	r2, r3, #31
 8000ae8:	4907      	ldr	r1, [pc, #28]	@ (8000b08 <__NVIC_EnableIRQ+0x38>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	095b      	lsrs	r3, r3, #5
 8000af0:	2001      	movs	r0, #1
 8000af2:	fa00 f202 	lsl.w	r2, r0, r2
 8000af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000e100 	.word	0xe000e100

08000b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	db0a      	blt.n	8000b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	490c      	ldr	r1, [pc, #48]	@ (8000b58 <__NVIC_SetPriority+0x4c>)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	0112      	lsls	r2, r2, #4
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	440b      	add	r3, r1
 8000b30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b34:	e00a      	b.n	8000b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4908      	ldr	r1, [pc, #32]	@ (8000b5c <__NVIC_SetPriority+0x50>)
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	f003 030f 	and.w	r3, r3, #15
 8000b42:	3b04      	subs	r3, #4
 8000b44:	0112      	lsls	r2, r2, #4
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	440b      	add	r3, r1
 8000b4a:	761a      	strb	r2, [r3, #24]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000e100 	.word	0xe000e100
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	@ 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f1c3 0307 	rsb	r3, r3, #7
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	bf28      	it	cs
 8000b7e:	2304      	movcs	r3, #4
 8000b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3304      	adds	r3, #4
 8000b86:	2b06      	cmp	r3, #6
 8000b88:	d902      	bls.n	8000b90 <NVIC_EncodePriority+0x30>
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3b03      	subs	r3, #3
 8000b8e:	e000      	b.n	8000b92 <NVIC_EncodePriority+0x32>
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43d9      	mvns	r1, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	4313      	orrs	r3, r2
         );
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3724      	adds	r7, #36	@ 0x24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bd8:	d301      	bcc.n	8000bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e00f      	b.n	8000bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bde:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <SysTick_Config+0x40>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be6:	210f      	movs	r1, #15
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bec:	f7ff ff8e 	bl	8000b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf0:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <SysTick_Config+0x40>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf6:	4b04      	ldr	r3, [pc, #16]	@ (8000c08 <SysTick_Config+0x40>)
 8000bf8:	2207      	movs	r2, #7
 8000bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	e000e010 	.word	0xe000e010

08000c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff ff29 	bl	8000a6c <__NVIC_SetPriorityGrouping>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b086      	sub	sp, #24
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	4603      	mov	r3, r0
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
 8000c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c34:	f7ff ff3e 	bl	8000ab4 <__NVIC_GetPriorityGrouping>
 8000c38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	68b9      	ldr	r1, [r7, #8]
 8000c3e:	6978      	ldr	r0, [r7, #20]
 8000c40:	f7ff ff8e 	bl	8000b60 <NVIC_EncodePriority>
 8000c44:	4602      	mov	r2, r0
 8000c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff5d 	bl	8000b0c <__NVIC_SetPriority>
}
 8000c52:	bf00      	nop
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff31 	bl	8000ad0 <__NVIC_EnableIRQ>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ffa2 	bl	8000bc8 <SysTick_Config>
 8000c84:	4603      	mov	r3, r0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b085      	sub	sp, #20
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d008      	beq.n	8000cb8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2204      	movs	r2, #4
 8000caa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e022      	b.n	8000cfe <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 020e 	bic.w	r2, r2, #14
 8000cc6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 0201 	bic.w	r2, r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cdc:	f003 021c 	and.w	r2, r3, #28
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cea:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d005      	beq.n	8000d2e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2204      	movs	r2, #4
 8000d26:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]
 8000d2c:	e029      	b.n	8000d82 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f022 020e 	bic.w	r2, r2, #14
 8000d3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 0201 	bic.w	r2, r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d52:	f003 021c 	and.w	r2, r3, #28
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d60:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2201      	movs	r2, #1
 8000d66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	4798      	blx	r3
    }
  }
  return status;
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9a:	e148      	b.n	800102e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	2101      	movs	r1, #1
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 813a 	beq.w	8001028 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d005      	beq.n	8000dcc <HAL_GPIO_Init+0x40>
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d130      	bne.n	8000e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e02:	2201      	movs	r2, #1
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	091b      	lsrs	r3, r3, #4
 8000e18:	f003 0201 	and.w	r2, r3, #1
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d017      	beq.n	8000e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2203      	movs	r2, #3
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d123      	bne.n	8000ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	08da      	lsrs	r2, r3, #3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	691a      	ldr	r2, [r3, #16]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	08da      	lsrs	r2, r3, #3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3208      	adds	r2, #8
 8000eb8:	6939      	ldr	r1, [r7, #16]
 8000eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0203 	and.w	r2, r3, #3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 8094 	beq.w	8001028 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f00:	4b52      	ldr	r3, [pc, #328]	@ (800104c <HAL_GPIO_Init+0x2c0>)
 8000f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f04:	4a51      	ldr	r2, [pc, #324]	@ (800104c <HAL_GPIO_Init+0x2c0>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f0c:	4b4f      	ldr	r3, [pc, #316]	@ (800104c <HAL_GPIO_Init+0x2c0>)
 8000f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f18:	4a4d      	ldr	r2, [pc, #308]	@ (8001050 <HAL_GPIO_Init+0x2c4>)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f42:	d00d      	beq.n	8000f60 <HAL_GPIO_Init+0x1d4>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a43      	ldr	r2, [pc, #268]	@ (8001054 <HAL_GPIO_Init+0x2c8>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d007      	beq.n	8000f5c <HAL_GPIO_Init+0x1d0>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a42      	ldr	r2, [pc, #264]	@ (8001058 <HAL_GPIO_Init+0x2cc>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d101      	bne.n	8000f58 <HAL_GPIO_Init+0x1cc>
 8000f54:	2302      	movs	r3, #2
 8000f56:	e004      	b.n	8000f62 <HAL_GPIO_Init+0x1d6>
 8000f58:	2307      	movs	r3, #7
 8000f5a:	e002      	b.n	8000f62 <HAL_GPIO_Init+0x1d6>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e000      	b.n	8000f62 <HAL_GPIO_Init+0x1d6>
 8000f60:	2300      	movs	r3, #0
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	f002 0203 	and.w	r2, r2, #3
 8000f68:	0092      	lsls	r2, r2, #2
 8000f6a:	4093      	lsls	r3, r2
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f72:	4937      	ldr	r1, [pc, #220]	@ (8001050 <HAL_GPIO_Init+0x2c4>)
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	3302      	adds	r3, #2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f80:	4b36      	ldr	r3, [pc, #216]	@ (800105c <HAL_GPIO_Init+0x2d0>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800105c <HAL_GPIO_Init+0x2d0>)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000faa:	4b2c      	ldr	r3, [pc, #176]	@ (800105c <HAL_GPIO_Init+0x2d0>)
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fce:	4a23      	ldr	r2, [pc, #140]	@ (800105c <HAL_GPIO_Init+0x2d0>)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fd4:	4b21      	ldr	r3, [pc, #132]	@ (800105c <HAL_GPIO_Init+0x2d0>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ff8:	4a18      	ldr	r2, [pc, #96]	@ (800105c <HAL_GPIO_Init+0x2d0>)
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	@ (800105c <HAL_GPIO_Init+0x2d0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001022:	4a0e      	ldr	r2, [pc, #56]	@ (800105c <HAL_GPIO_Init+0x2d0>)
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3301      	adds	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	fa22 f303 	lsr.w	r3, r2, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	f47f aeaf 	bne.w	8000d9c <HAL_GPIO_Init+0x10>
  }
}
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	371c      	adds	r7, #28
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	40021000 	.word	0x40021000
 8001050:	40010000 	.word	0x40010000
 8001054:	48000400 	.word	0x48000400
 8001058:	48000800 	.word	0x48000800
 800105c:	40010400 	.word	0x40010400

08001060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
 800106c:	4613      	mov	r3, r2
 800106e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001070:	787b      	ldrb	r3, [r7, #1]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001076:	887a      	ldrh	r2, [r7, #2]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800107c:	e002      	b.n	8001084 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800107e:	887a      	ldrh	r2, [r7, #2]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40007000 	.word	0x40007000

080010ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010ba:	d130      	bne.n	800111e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010bc:	4b23      	ldr	r3, [pc, #140]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010c8:	d038      	beq.n	800113c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ca:	4b20      	ldr	r3, [pc, #128]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010d2:	4a1e      	ldr	r2, [pc, #120]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010da:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2232      	movs	r2, #50	@ 0x32
 80010e0:	fb02 f303 	mul.w	r3, r2, r3
 80010e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001154 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010e6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ea:	0c9b      	lsrs	r3, r3, #18
 80010ec:	3301      	adds	r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010f0:	e002      	b.n	80010f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010f8:	4b14      	ldr	r3, [pc, #80]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001104:	d102      	bne.n	800110c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f2      	bne.n	80010f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001114:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001118:	d110      	bne.n	800113c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e00f      	b.n	800113e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800112a:	d007      	beq.n	800113c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800112c:	4b07      	ldr	r3, [pc, #28]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001134:	4a05      	ldr	r2, [pc, #20]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001136:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800113a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40007000 	.word	0x40007000
 8001150:	20000000 	.word	0x20000000
 8001154:	431bde83 	.word	0x431bde83

08001158 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d102      	bne.n	800116c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	f000 bc02 	b.w	8001970 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800116c:	4b96      	ldr	r3, [pc, #600]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f003 030c 	and.w	r3, r3, #12
 8001174:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001176:	4b94      	ldr	r3, [pc, #592]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0310 	and.w	r3, r3, #16
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80e4 	beq.w	8001356 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d007      	beq.n	80011a4 <HAL_RCC_OscConfig+0x4c>
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	2b0c      	cmp	r3, #12
 8001198:	f040 808b 	bne.w	80012b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	f040 8087 	bne.w	80012b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011a4:	4b88      	ldr	r3, [pc, #544]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <HAL_RCC_OscConfig+0x64>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e3d9      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1a      	ldr	r2, [r3, #32]
 80011c0:	4b81      	ldr	r3, [pc, #516]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d004      	beq.n	80011d6 <HAL_RCC_OscConfig+0x7e>
 80011cc:	4b7e      	ldr	r3, [pc, #504]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011d4:	e005      	b.n	80011e2 <HAL_RCC_OscConfig+0x8a>
 80011d6:	4b7c      	ldr	r3, [pc, #496]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 80011d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d223      	bcs.n	800122e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fd8c 	bl	8001d08 <RCC_SetFlashLatencyFromMSIRange>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e3ba      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011fa:	4b73      	ldr	r3, [pc, #460]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a72      	ldr	r2, [pc, #456]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b70      	ldr	r3, [pc, #448]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	496d      	ldr	r1, [pc, #436]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001214:	4313      	orrs	r3, r2
 8001216:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001218:	4b6b      	ldr	r3, [pc, #428]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	4968      	ldr	r1, [pc, #416]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001228:	4313      	orrs	r3, r2
 800122a:	604b      	str	r3, [r1, #4]
 800122c:	e025      	b.n	800127a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800122e:	4b66      	ldr	r3, [pc, #408]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a65      	ldr	r2, [pc, #404]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b63      	ldr	r3, [pc, #396]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	4960      	ldr	r1, [pc, #384]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001248:	4313      	orrs	r3, r2
 800124a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800124c:	4b5e      	ldr	r3, [pc, #376]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	495b      	ldr	r1, [pc, #364]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 800125c:	4313      	orrs	r3, r2
 800125e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d109      	bne.n	800127a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fd4c 	bl	8001d08 <RCC_SetFlashLatencyFromMSIRange>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e37a      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800127a:	f000 fc81 	bl	8001b80 <HAL_RCC_GetSysClockFreq>
 800127e:	4602      	mov	r2, r0
 8001280:	4b51      	ldr	r3, [pc, #324]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	4950      	ldr	r1, [pc, #320]	@ (80013cc <HAL_RCC_OscConfig+0x274>)
 800128c:	5ccb      	ldrb	r3, [r1, r3]
 800128e:	f003 031f 	and.w	r3, r3, #31
 8001292:	fa22 f303 	lsr.w	r3, r2, r3
 8001296:	4a4e      	ldr	r2, [pc, #312]	@ (80013d0 <HAL_RCC_OscConfig+0x278>)
 8001298:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800129a:	4b4e      	ldr	r3, [pc, #312]	@ (80013d4 <HAL_RCC_OscConfig+0x27c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fb64 	bl	800096c <HAL_InitTick>
 80012a4:	4603      	mov	r3, r0
 80012a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d052      	beq.n	8001354 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	e35e      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d032      	beq.n	8001320 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012ba:	4b43      	ldr	r3, [pc, #268]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a42      	ldr	r2, [pc, #264]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012c6:	f7ff fba1 	bl	8000a0c <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ce:	f7ff fb9d 	bl	8000a0c <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e347      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012e0:	4b39      	ldr	r3, [pc, #228]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ec:	4b36      	ldr	r3, [pc, #216]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a35      	ldr	r2, [pc, #212]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b33      	ldr	r3, [pc, #204]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	4930      	ldr	r1, [pc, #192]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800130a:	4b2f      	ldr	r3, [pc, #188]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	492b      	ldr	r1, [pc, #172]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 800131a:	4313      	orrs	r3, r2
 800131c:	604b      	str	r3, [r1, #4]
 800131e:	e01a      	b.n	8001356 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001320:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a28      	ldr	r2, [pc, #160]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001326:	f023 0301 	bic.w	r3, r3, #1
 800132a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800132c:	f7ff fb6e 	bl	8000a0c <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001334:	f7ff fb6a 	bl	8000a0c <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e314      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001346:	4b20      	ldr	r3, [pc, #128]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x1dc>
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001354:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d073      	beq.n	800144a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	2b08      	cmp	r3, #8
 8001366:	d005      	beq.n	8001374 <HAL_RCC_OscConfig+0x21c>
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	2b0c      	cmp	r3, #12
 800136c:	d10e      	bne.n	800138c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	2b03      	cmp	r3, #3
 8001372:	d10b      	bne.n	800138c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001374:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d063      	beq.n	8001448 <HAL_RCC_OscConfig+0x2f0>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d15f      	bne.n	8001448 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e2f1      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001394:	d106      	bne.n	80013a4 <HAL_RCC_OscConfig+0x24c>
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a0b      	ldr	r2, [pc, #44]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 800139c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e025      	b.n	80013f0 <HAL_RCC_OscConfig+0x298>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013ac:	d114      	bne.n	80013d8 <HAL_RCC_OscConfig+0x280>
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a05      	ldr	r2, [pc, #20]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 80013b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	4b03      	ldr	r3, [pc, #12]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a02      	ldr	r2, [pc, #8]	@ (80013c8 <HAL_RCC_OscConfig+0x270>)
 80013c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e013      	b.n	80013f0 <HAL_RCC_OscConfig+0x298>
 80013c8:	40021000 	.word	0x40021000
 80013cc:	08003728 	.word	0x08003728
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000004 	.word	0x20000004
 80013d8:	4ba0      	ldr	r3, [pc, #640]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a9f      	ldr	r2, [pc, #636]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 80013de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b9d      	ldr	r3, [pc, #628]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a9c      	ldr	r2, [pc, #624]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 80013ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d013      	beq.n	8001420 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff fb08 	bl	8000a0c <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fb04 	bl	8000a0c <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	@ 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e2ae      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001412:	4b92      	ldr	r3, [pc, #584]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x2a8>
 800141e:	e014      	b.n	800144a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001420:	f7ff faf4 	bl	8000a0c <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff faf0 	bl	8000a0c <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	@ 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e29a      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800143a:	4b88      	ldr	r3, [pc, #544]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x2d0>
 8001446:	e000      	b.n	800144a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d060      	beq.n	8001518 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	2b04      	cmp	r3, #4
 800145a:	d005      	beq.n	8001468 <HAL_RCC_OscConfig+0x310>
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b0c      	cmp	r3, #12
 8001460:	d119      	bne.n	8001496 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d116      	bne.n	8001496 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001468:	4b7c      	ldr	r3, [pc, #496]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_RCC_OscConfig+0x328>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e277      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001480:	4b76      	ldr	r3, [pc, #472]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	061b      	lsls	r3, r3, #24
 800148e:	4973      	ldr	r1, [pc, #460]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001494:	e040      	b.n	8001518 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d023      	beq.n	80014e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800149e:	4b6f      	ldr	r3, [pc, #444]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a6e      	ldr	r2, [pc, #440]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 80014a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014aa:	f7ff faaf 	bl	8000a0c <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b2:	f7ff faab 	bl	8000a0c <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e255      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c4:	4b65      	ldr	r3, [pc, #404]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d0:	4b62      	ldr	r3, [pc, #392]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	061b      	lsls	r3, r3, #24
 80014de:	495f      	ldr	r1, [pc, #380]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
 80014e4:	e018      	b.n	8001518 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e6:	4b5d      	ldr	r3, [pc, #372]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a5c      	ldr	r2, [pc, #368]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 80014ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f2:	f7ff fa8b 	bl	8000a0c <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fa:	f7ff fa87 	bl	8000a0c <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e231      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800150c:	4b53      	ldr	r3, [pc, #332]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f0      	bne.n	80014fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b00      	cmp	r3, #0
 8001522:	d03c      	beq.n	800159e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d01c      	beq.n	8001566 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152c:	4b4b      	ldr	r3, [pc, #300]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 800152e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001532:	4a4a      	ldr	r2, [pc, #296]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153c:	f7ff fa66 	bl	8000a0c <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001544:	f7ff fa62 	bl	8000a0c <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e20c      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001556:	4b41      	ldr	r3, [pc, #260]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 8001558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0ef      	beq.n	8001544 <HAL_RCC_OscConfig+0x3ec>
 8001564:	e01b      	b.n	800159e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001566:	4b3d      	ldr	r3, [pc, #244]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 8001568:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800156c:	4a3b      	ldr	r2, [pc, #236]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 800156e:	f023 0301 	bic.w	r3, r3, #1
 8001572:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001576:	f7ff fa49 	bl	8000a0c <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157e:	f7ff fa45 	bl	8000a0c <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e1ef      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001590:	4b32      	ldr	r3, [pc, #200]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 8001592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1ef      	bne.n	800157e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 80a6 	beq.w	80016f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ac:	2300      	movs	r3, #0
 80015ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015b0:	4b2a      	ldr	r3, [pc, #168]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 80015b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10d      	bne.n	80015d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015bc:	4b27      	ldr	r3, [pc, #156]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 80015be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c0:	4a26      	ldr	r2, [pc, #152]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 80015c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015c8:	4b24      	ldr	r3, [pc, #144]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 80015ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015d4:	2301      	movs	r3, #1
 80015d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d8:	4b21      	ldr	r3, [pc, #132]	@ (8001660 <HAL_RCC_OscConfig+0x508>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d118      	bne.n	8001616 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001660 <HAL_RCC_OscConfig+0x508>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001660 <HAL_RCC_OscConfig+0x508>)
 80015ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f0:	f7ff fa0c 	bl	8000a0c <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f8:	f7ff fa08 	bl	8000a0c <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e1b2      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_RCC_OscConfig+0x508>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d108      	bne.n	8001630 <HAL_RCC_OscConfig+0x4d8>
 800161e:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 8001620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001624:	4a0d      	ldr	r2, [pc, #52]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800162e:	e029      	b.n	8001684 <HAL_RCC_OscConfig+0x52c>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b05      	cmp	r3, #5
 8001636:	d115      	bne.n	8001664 <HAL_RCC_OscConfig+0x50c>
 8001638:	4b08      	ldr	r3, [pc, #32]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 800163a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800163e:	4a07      	ldr	r2, [pc, #28]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001648:	4b04      	ldr	r3, [pc, #16]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 800164a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800164e:	4a03      	ldr	r2, [pc, #12]	@ (800165c <HAL_RCC_OscConfig+0x504>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001658:	e014      	b.n	8001684 <HAL_RCC_OscConfig+0x52c>
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	40007000 	.word	0x40007000
 8001664:	4b9a      	ldr	r3, [pc, #616]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 8001666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800166a:	4a99      	ldr	r2, [pc, #612]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001674:	4b96      	ldr	r3, [pc, #600]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 8001676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800167a:	4a95      	ldr	r2, [pc, #596]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 800167c:	f023 0304 	bic.w	r3, r3, #4
 8001680:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d016      	beq.n	80016ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7ff f9be 	bl	8000a0c <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001692:	e00a      	b.n	80016aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001694:	f7ff f9ba 	bl	8000a0c <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e162      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016aa:	4b89      	ldr	r3, [pc, #548]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 80016ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0ed      	beq.n	8001694 <HAL_RCC_OscConfig+0x53c>
 80016b8:	e015      	b.n	80016e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff f9a7 	bl	8000a0c <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff f9a3 	bl	8000a0c <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e14b      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016d8:	4b7d      	ldr	r3, [pc, #500]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 80016da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1ed      	bne.n	80016c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016e6:	7ffb      	ldrb	r3, [r7, #31]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d105      	bne.n	80016f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ec:	4b78      	ldr	r3, [pc, #480]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f0:	4a77      	ldr	r2, [pc, #476]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 80016f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0320 	and.w	r3, r3, #32
 8001700:	2b00      	cmp	r3, #0
 8001702:	d03c      	beq.n	800177e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001708:	2b00      	cmp	r3, #0
 800170a:	d01c      	beq.n	8001746 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800170c:	4b70      	ldr	r3, [pc, #448]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 800170e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001712:	4a6f      	ldr	r2, [pc, #444]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171c:	f7ff f976 	bl	8000a0c <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001724:	f7ff f972 	bl	8000a0c <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e11c      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001736:	4b66      	ldr	r3, [pc, #408]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 8001738:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0ef      	beq.n	8001724 <HAL_RCC_OscConfig+0x5cc>
 8001744:	e01b      	b.n	800177e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001746:	4b62      	ldr	r3, [pc, #392]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 8001748:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800174c:	4a60      	ldr	r2, [pc, #384]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001756:	f7ff f959 	bl	8000a0c <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800175e:	f7ff f955 	bl	8000a0c <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e0ff      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001770:	4b57      	ldr	r3, [pc, #348]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 8001772:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1ef      	bne.n	800175e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 80f3 	beq.w	800196e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800178c:	2b02      	cmp	r3, #2
 800178e:	f040 80c9 	bne.w	8001924 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001792:	4b4f      	ldr	r3, [pc, #316]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f003 0203 	and.w	r2, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d12c      	bne.n	8001800 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b0:	3b01      	subs	r3, #1
 80017b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d123      	bne.n	8001800 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d11b      	bne.n	8001800 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d113      	bne.n	8001800 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e2:	085b      	lsrs	r3, r3, #1
 80017e4:	3b01      	subs	r3, #1
 80017e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d109      	bne.n	8001800 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	085b      	lsrs	r3, r3, #1
 80017f8:	3b01      	subs	r3, #1
 80017fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d06b      	beq.n	80018d8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b0c      	cmp	r3, #12
 8001804:	d062      	beq.n	80018cc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001806:	4b32      	ldr	r3, [pc, #200]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e0ac      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001816:	4b2e      	ldr	r3, [pc, #184]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a2d      	ldr	r2, [pc, #180]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 800181c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001820:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001822:	f7ff f8f3 	bl	8000a0c <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182a:	f7ff f8ef 	bl	8000a0c <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e099      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800183c:	4b24      	ldr	r3, [pc, #144]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f0      	bne.n	800182a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001848:	4b21      	ldr	r3, [pc, #132]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <HAL_RCC_OscConfig+0x77c>)
 800184e:	4013      	ands	r3, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001858:	3a01      	subs	r2, #1
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	4311      	orrs	r1, r2
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001862:	0212      	lsls	r2, r2, #8
 8001864:	4311      	orrs	r1, r2
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800186a:	0852      	lsrs	r2, r2, #1
 800186c:	3a01      	subs	r2, #1
 800186e:	0552      	lsls	r2, r2, #21
 8001870:	4311      	orrs	r1, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001876:	0852      	lsrs	r2, r2, #1
 8001878:	3a01      	subs	r2, #1
 800187a:	0652      	lsls	r2, r2, #25
 800187c:	4311      	orrs	r1, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001882:	06d2      	lsls	r2, r2, #27
 8001884:	430a      	orrs	r2, r1
 8001886:	4912      	ldr	r1, [pc, #72]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 8001888:	4313      	orrs	r3, r2
 800188a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800188c:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0f      	ldr	r2, [pc, #60]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 8001892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001896:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001898:	4b0d      	ldr	r3, [pc, #52]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4a0c      	ldr	r2, [pc, #48]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 800189e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018a4:	f7ff f8b2 	bl	8000a0c <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ac:	f7ff f8ae 	bl	8000a0c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e058      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018be:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <HAL_RCC_OscConfig+0x778>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018ca:	e050      	b.n	800196e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e04f      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
 80018d0:	40021000 	.word	0x40021000
 80018d4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d8:	4b27      	ldr	r3, [pc, #156]	@ (8001978 <HAL_RCC_OscConfig+0x820>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d144      	bne.n	800196e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018e4:	4b24      	ldr	r3, [pc, #144]	@ (8001978 <HAL_RCC_OscConfig+0x820>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a23      	ldr	r2, [pc, #140]	@ (8001978 <HAL_RCC_OscConfig+0x820>)
 80018ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018f0:	4b21      	ldr	r3, [pc, #132]	@ (8001978 <HAL_RCC_OscConfig+0x820>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4a20      	ldr	r2, [pc, #128]	@ (8001978 <HAL_RCC_OscConfig+0x820>)
 80018f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018fc:	f7ff f886 	bl	8000a0c <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff f882 	bl	8000a0c <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e02c      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001916:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <HAL_RCC_OscConfig+0x820>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x7ac>
 8001922:	e024      	b.n	800196e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2b0c      	cmp	r3, #12
 8001928:	d01f      	beq.n	800196a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192a:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <HAL_RCC_OscConfig+0x820>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a12      	ldr	r2, [pc, #72]	@ (8001978 <HAL_RCC_OscConfig+0x820>)
 8001930:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001936:	f7ff f869 	bl	8000a0c <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193e:	f7ff f865 	bl	8000a0c <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e00f      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001950:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <HAL_RCC_OscConfig+0x820>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f0      	bne.n	800193e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800195c:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_RCC_OscConfig+0x820>)
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	4905      	ldr	r1, [pc, #20]	@ (8001978 <HAL_RCC_OscConfig+0x820>)
 8001962:	4b06      	ldr	r3, [pc, #24]	@ (800197c <HAL_RCC_OscConfig+0x824>)
 8001964:	4013      	ands	r3, r2
 8001966:	60cb      	str	r3, [r1, #12]
 8001968:	e001      	b.n	800196e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3720      	adds	r7, #32
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40021000 	.word	0x40021000
 800197c:	feeefffc 	.word	0xfeeefffc

08001980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0e7      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001994:	4b75      	ldr	r3, [pc, #468]	@ (8001b6c <HAL_RCC_ClockConfig+0x1ec>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d910      	bls.n	80019c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a2:	4b72      	ldr	r3, [pc, #456]	@ (8001b6c <HAL_RCC_ClockConfig+0x1ec>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 0207 	bic.w	r2, r3, #7
 80019aa:	4970      	ldr	r1, [pc, #448]	@ (8001b6c <HAL_RCC_ClockConfig+0x1ec>)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b2:	4b6e      	ldr	r3, [pc, #440]	@ (8001b6c <HAL_RCC_ClockConfig+0x1ec>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0cf      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d010      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	4b66      	ldr	r3, [pc, #408]	@ (8001b70 <HAL_RCC_ClockConfig+0x1f0>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019dc:	429a      	cmp	r2, r3
 80019de:	d908      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e0:	4b63      	ldr	r3, [pc, #396]	@ (8001b70 <HAL_RCC_ClockConfig+0x1f0>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	4960      	ldr	r1, [pc, #384]	@ (8001b70 <HAL_RCC_ClockConfig+0x1f0>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d04c      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a06:	4b5a      	ldr	r3, [pc, #360]	@ (8001b70 <HAL_RCC_ClockConfig+0x1f0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d121      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0a6      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b54      	ldr	r3, [pc, #336]	@ (8001b70 <HAL_RCC_ClockConfig+0x1f0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d115      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e09a      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a36:	4b4e      	ldr	r3, [pc, #312]	@ (8001b70 <HAL_RCC_ClockConfig+0x1f0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d109      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e08e      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a46:	4b4a      	ldr	r3, [pc, #296]	@ (8001b70 <HAL_RCC_ClockConfig+0x1f0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e086      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a56:	4b46      	ldr	r3, [pc, #280]	@ (8001b70 <HAL_RCC_ClockConfig+0x1f0>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f023 0203 	bic.w	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4943      	ldr	r1, [pc, #268]	@ (8001b70 <HAL_RCC_ClockConfig+0x1f0>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a68:	f7fe ffd0 	bl	8000a0c <HAL_GetTick>
 8001a6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	e00a      	b.n	8001a86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a70:	f7fe ffcc 	bl	8000a0c <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e06e      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a86:	4b3a      	ldr	r3, [pc, #232]	@ (8001b70 <HAL_RCC_ClockConfig+0x1f0>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 020c 	and.w	r2, r3, #12
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d1eb      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d010      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	4b31      	ldr	r3, [pc, #196]	@ (8001b70 <HAL_RCC_ClockConfig+0x1f0>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d208      	bcs.n	8001ac6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b70 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	492b      	ldr	r1, [pc, #172]	@ (8001b70 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac6:	4b29      	ldr	r3, [pc, #164]	@ (8001b6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d210      	bcs.n	8001af6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad4:	4b25      	ldr	r3, [pc, #148]	@ (8001b6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 0207 	bic.w	r2, r3, #7
 8001adc:	4923      	ldr	r1, [pc, #140]	@ (8001b6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae4:	4b21      	ldr	r3, [pc, #132]	@ (8001b6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e036      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d008      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b02:	4b1b      	ldr	r3, [pc, #108]	@ (8001b70 <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	4918      	ldr	r1, [pc, #96]	@ (8001b70 <HAL_RCC_ClockConfig+0x1f0>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d009      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b20:	4b13      	ldr	r3, [pc, #76]	@ (8001b70 <HAL_RCC_ClockConfig+0x1f0>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4910      	ldr	r1, [pc, #64]	@ (8001b70 <HAL_RCC_ClockConfig+0x1f0>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b34:	f000 f824 	bl	8001b80 <HAL_RCC_GetSysClockFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	091b      	lsrs	r3, r3, #4
 8001b40:	f003 030f 	and.w	r3, r3, #15
 8001b44:	490b      	ldr	r1, [pc, #44]	@ (8001b74 <HAL_RCC_ClockConfig+0x1f4>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b50:	4a09      	ldr	r2, [pc, #36]	@ (8001b78 <HAL_RCC_ClockConfig+0x1f8>)
 8001b52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b54:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <HAL_RCC_ClockConfig+0x1fc>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe ff07 	bl	800096c <HAL_InitTick>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b62:	7afb      	ldrb	r3, [r7, #11]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40022000 	.word	0x40022000
 8001b70:	40021000 	.word	0x40021000
 8001b74:	08003728 	.word	0x08003728
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	20000004 	.word	0x20000004

08001b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	@ 0x24
 8001b84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b8e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b98:	4b3b      	ldr	r3, [pc, #236]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b0c      	cmp	r3, #12
 8001bac:	d121      	bne.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d11e      	bne.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bb4:	4b34      	ldr	r3, [pc, #208]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bc0:	4b31      	ldr	r3, [pc, #196]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bc6:	0a1b      	lsrs	r3, r3, #8
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	e005      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bdc:	4a2b      	ldr	r2, [pc, #172]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10d      	bne.n	8001c08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bf0:	e00a      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d102      	bne.n	8001bfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bf8:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	e004      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c04:	4b23      	ldr	r3, [pc, #140]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d134      	bne.n	8001c78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d003      	beq.n	8001c26 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d003      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0xac>
 8001c24:	e005      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c26:	4b1a      	ldr	r3, [pc, #104]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c28:	617b      	str	r3, [r7, #20]
      break;
 8001c2a:	e005      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c2c:	4b19      	ldr	r3, [pc, #100]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c2e:	617b      	str	r3, [r7, #20]
      break;
 8001c30:	e002      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	617b      	str	r3, [r7, #20]
      break;
 8001c36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c38:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	3301      	adds	r3, #1
 8001c44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c46:	4b10      	ldr	r3, [pc, #64]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	0a1b      	lsrs	r3, r3, #8
 8001c4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	fb03 f202 	mul.w	r2, r3, r2
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	0e5b      	lsrs	r3, r3, #25
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	3301      	adds	r3, #1
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c78:	69bb      	ldr	r3, [r7, #24]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3724      	adds	r7, #36	@ 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	08003740 	.word	0x08003740
 8001c90:	00f42400 	.word	0x00f42400
 8001c94:	007a1200 	.word	0x007a1200

08001c98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	@ (8001cac <HAL_RCC_GetHCLKFreq+0x14>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000000 	.word	0x20000000

08001cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cb4:	f7ff fff0 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	0a1b      	lsrs	r3, r3, #8
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	4904      	ldr	r1, [pc, #16]	@ (8001cd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cc6:	5ccb      	ldrb	r3, [r1, r3]
 8001cc8:	f003 031f 	and.w	r3, r3, #31
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	08003738 	.word	0x08003738

08001cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ce0:	f7ff ffda 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	0adb      	lsrs	r3, r3, #11
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	4904      	ldr	r1, [pc, #16]	@ (8001d04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cf2:	5ccb      	ldrb	r3, [r1, r3]
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000
 8001d04:	08003738 	.word	0x08003738

08001d08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d14:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d20:	f7ff f9b6 	bl	8001090 <HAL_PWREx_GetVoltageRange>
 8001d24:	6178      	str	r0, [r7, #20]
 8001d26:	e014      	b.n	8001d52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d28:	4b25      	ldr	r3, [pc, #148]	@ (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2c:	4a24      	ldr	r2, [pc, #144]	@ (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d34:	4b22      	ldr	r3, [pc, #136]	@ (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d40:	f7ff f9a6 	bl	8001090 <HAL_PWREx_GetVoltageRange>
 8001d44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d46:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d50:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d58:	d10b      	bne.n	8001d72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b80      	cmp	r3, #128	@ 0x80
 8001d5e:	d919      	bls.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d64:	d902      	bls.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d66:	2302      	movs	r3, #2
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	e013      	b.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	e010      	b.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b80      	cmp	r3, #128	@ 0x80
 8001d76:	d902      	bls.n	8001d7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d78:	2303      	movs	r3, #3
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	e00a      	b.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b80      	cmp	r3, #128	@ 0x80
 8001d82:	d102      	bne.n	8001d8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d84:	2302      	movs	r3, #2
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	e004      	b.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b70      	cmp	r3, #112	@ 0x70
 8001d8e:	d101      	bne.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d90:	2301      	movs	r3, #1
 8001d92:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d94:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 0207 	bic.w	r2, r3, #7
 8001d9c:	4909      	ldr	r1, [pc, #36]	@ (8001dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001da4:	4b07      	ldr	r3, [pc, #28]	@ (8001dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d001      	beq.n	8001db6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40022000 	.word	0x40022000

08001dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d031      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001dec:	d01a      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001dee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001df2:	d814      	bhi.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d009      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001df8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001dfc:	d10f      	bne.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	4a5c      	ldr	r2, [pc, #368]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e08:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e0a:	e00c      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3304      	adds	r3, #4
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f9ce 	bl	80021b4 <RCCEx_PLLSAI1_Config>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e1c:	e003      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	74fb      	strb	r3, [r7, #19]
      break;
 8001e22:	e000      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e26:	7cfb      	ldrb	r3, [r7, #19]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10b      	bne.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e2c:	4b51      	ldr	r3, [pc, #324]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e32:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e3a:	494e      	ldr	r1, [pc, #312]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e42:	e001      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e44:	7cfb      	ldrb	r3, [r7, #19]
 8001e46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 809e 	beq.w	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e5a:	4b46      	ldr	r3, [pc, #280]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00d      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e70:	4b40      	ldr	r3, [pc, #256]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e74:	4a3f      	ldr	r2, [pc, #252]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a39      	ldr	r2, [pc, #228]	@ (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e98:	f7fe fdb8 	bl	8000a0c <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e9e:	e009      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea0:	f7fe fdb4 	bl	8000a0c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d902      	bls.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	74fb      	strb	r3, [r7, #19]
        break;
 8001eb2:	e005      	b.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001eb4:	4b30      	ldr	r3, [pc, #192]	@ (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0ef      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001ec0:	7cfb      	ldrb	r3, [r7, #19]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d15a      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ec6:	4b2b      	ldr	r3, [pc, #172]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ecc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ed0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d01e      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d019      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ee2:	4b24      	ldr	r3, [pc, #144]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001eec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001eee:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef4:	4a1f      	ldr	r2, [pc, #124]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001efa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001efe:	4b1d      	ldr	r3, [pc, #116]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f04:	4a1b      	ldr	r2, [pc, #108]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f0e:	4a19      	ldr	r2, [pc, #100]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d016      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7fe fd74 	bl	8000a0c <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f26:	e00b      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f28:	f7fe fd70 	bl	8000a0c <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d902      	bls.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	74fb      	strb	r3, [r7, #19]
            break;
 8001f3e:	e006      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f40:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0ec      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001f4e:	7cfb      	ldrb	r3, [r7, #19]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10b      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f54:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f62:	4904      	ldr	r1, [pc, #16]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f6a:	e009      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	74bb      	strb	r3, [r7, #18]
 8001f70:	e006      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f80:	7c7b      	ldrb	r3, [r7, #17]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d105      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f86:	4b8a      	ldr	r3, [pc, #552]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8a:	4a89      	ldr	r2, [pc, #548]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f90:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f9e:	4b84      	ldr	r3, [pc, #528]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa4:	f023 0203 	bic.w	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4980      	ldr	r1, [pc, #512]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00a      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fc0:	4b7b      	ldr	r3, [pc, #492]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc6:	f023 020c 	bic.w	r2, r3, #12
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fce:	4978      	ldr	r1, [pc, #480]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fe2:	4b73      	ldr	r3, [pc, #460]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff0:	496f      	ldr	r1, [pc, #444]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002004:	4b6a      	ldr	r3, [pc, #424]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800200a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002012:	4967      	ldr	r1, [pc, #412]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002014:	4313      	orrs	r3, r2
 8002016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002026:	4b62      	ldr	r3, [pc, #392]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002034:	495e      	ldr	r1, [pc, #376]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00a      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002048:	4b59      	ldr	r3, [pc, #356]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002056:	4956      	ldr	r1, [pc, #344]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00a      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800206a:	4b51      	ldr	r3, [pc, #324]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800206c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002070:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002078:	494d      	ldr	r1, [pc, #308]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d028      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800208c:	4b48      	ldr	r3, [pc, #288]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002092:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	4945      	ldr	r1, [pc, #276]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020aa:	d106      	bne.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020ac:	4b40      	ldr	r3, [pc, #256]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a3f      	ldr	r2, [pc, #252]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020b6:	60d3      	str	r3, [r2, #12]
 80020b8:	e011      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020c2:	d10c      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3304      	adds	r3, #4
 80020c8:	2101      	movs	r1, #1
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f872 	bl	80021b4 <RCCEx_PLLSAI1_Config>
 80020d0:	4603      	mov	r3, r0
 80020d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020d4:	7cfb      	ldrb	r3, [r7, #19]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80020da:	7cfb      	ldrb	r3, [r7, #19]
 80020dc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d028      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020ea:	4b31      	ldr	r3, [pc, #196]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f8:	492d      	ldr	r1, [pc, #180]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002104:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002108:	d106      	bne.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800210a:	4b29      	ldr	r3, [pc, #164]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	4a28      	ldr	r2, [pc, #160]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002110:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002114:	60d3      	str	r3, [r2, #12]
 8002116:	e011      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002120:	d10c      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3304      	adds	r3, #4
 8002126:	2101      	movs	r1, #1
 8002128:	4618      	mov	r0, r3
 800212a:	f000 f843 	bl	80021b4 <RCCEx_PLLSAI1_Config>
 800212e:	4603      	mov	r3, r0
 8002130:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002132:	7cfb      	ldrb	r3, [r7, #19]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002138:	7cfb      	ldrb	r3, [r7, #19]
 800213a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01c      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002148:	4b19      	ldr	r3, [pc, #100]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002156:	4916      	ldr	r1, [pc, #88]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002162:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002166:	d10c      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3304      	adds	r3, #4
 800216c:	2102      	movs	r1, #2
 800216e:	4618      	mov	r0, r3
 8002170:	f000 f820 	bl	80021b4 <RCCEx_PLLSAI1_Config>
 8002174:	4603      	mov	r3, r0
 8002176:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800217e:	7cfb      	ldrb	r3, [r7, #19]
 8002180:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00a      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800218e:	4b08      	ldr	r3, [pc, #32]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002194:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219c:	4904      	ldr	r1, [pc, #16]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000

080021b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021c2:	4b74      	ldr	r3, [pc, #464]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d018      	beq.n	8002200 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80021ce:	4b71      	ldr	r3, [pc, #452]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f003 0203 	and.w	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d10d      	bne.n	80021fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
       ||
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80021e6:	4b6b      	ldr	r3, [pc, #428]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	091b      	lsrs	r3, r3, #4
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
       ||
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d047      	beq.n	800228a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
 80021fe:	e044      	b.n	800228a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b03      	cmp	r3, #3
 8002206:	d018      	beq.n	800223a <RCCEx_PLLSAI1_Config+0x86>
 8002208:	2b03      	cmp	r3, #3
 800220a:	d825      	bhi.n	8002258 <RCCEx_PLLSAI1_Config+0xa4>
 800220c:	2b01      	cmp	r3, #1
 800220e:	d002      	beq.n	8002216 <RCCEx_PLLSAI1_Config+0x62>
 8002210:	2b02      	cmp	r3, #2
 8002212:	d009      	beq.n	8002228 <RCCEx_PLLSAI1_Config+0x74>
 8002214:	e020      	b.n	8002258 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002216:	4b5f      	ldr	r3, [pc, #380]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d11d      	bne.n	800225e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002226:	e01a      	b.n	800225e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002228:	4b5a      	ldr	r3, [pc, #360]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002230:	2b00      	cmp	r3, #0
 8002232:	d116      	bne.n	8002262 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002238:	e013      	b.n	8002262 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800223a:	4b56      	ldr	r3, [pc, #344]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10f      	bne.n	8002266 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002246:	4b53      	ldr	r3, [pc, #332]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d109      	bne.n	8002266 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002256:	e006      	b.n	8002266 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
      break;
 800225c:	e004      	b.n	8002268 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800225e:	bf00      	nop
 8002260:	e002      	b.n	8002268 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002262:	bf00      	nop
 8002264:	e000      	b.n	8002268 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002266:	bf00      	nop
    }

    if(status == HAL_OK)
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10d      	bne.n	800228a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800226e:	4b49      	ldr	r3, [pc, #292]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6819      	ldr	r1, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	430b      	orrs	r3, r1
 8002284:	4943      	ldr	r1, [pc, #268]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002286:	4313      	orrs	r3, r2
 8002288:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d17c      	bne.n	800238a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002290:	4b40      	ldr	r3, [pc, #256]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a3f      	ldr	r2, [pc, #252]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002296:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800229a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800229c:	f7fe fbb6 	bl	8000a0c <HAL_GetTick>
 80022a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022a2:	e009      	b.n	80022b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022a4:	f7fe fbb2 	bl	8000a0c <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d902      	bls.n	80022b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	73fb      	strb	r3, [r7, #15]
        break;
 80022b6:	e005      	b.n	80022c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022b8:	4b36      	ldr	r3, [pc, #216]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1ef      	bne.n	80022a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d15f      	bne.n	800238a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d110      	bne.n	80022f2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022d0:	4b30      	ldr	r3, [pc, #192]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80022d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6892      	ldr	r2, [r2, #8]
 80022e0:	0211      	lsls	r1, r2, #8
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68d2      	ldr	r2, [r2, #12]
 80022e6:	06d2      	lsls	r2, r2, #27
 80022e8:	430a      	orrs	r2, r1
 80022ea:	492a      	ldr	r1, [pc, #168]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	610b      	str	r3, [r1, #16]
 80022f0:	e027      	b.n	8002342 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d112      	bne.n	800231e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022f8:	4b26      	ldr	r3, [pc, #152]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002300:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6892      	ldr	r2, [r2, #8]
 8002308:	0211      	lsls	r1, r2, #8
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6912      	ldr	r2, [r2, #16]
 800230e:	0852      	lsrs	r2, r2, #1
 8002310:	3a01      	subs	r2, #1
 8002312:	0552      	lsls	r2, r2, #21
 8002314:	430a      	orrs	r2, r1
 8002316:	491f      	ldr	r1, [pc, #124]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002318:	4313      	orrs	r3, r2
 800231a:	610b      	str	r3, [r1, #16]
 800231c:	e011      	b.n	8002342 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800231e:	4b1d      	ldr	r3, [pc, #116]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002326:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6892      	ldr	r2, [r2, #8]
 800232e:	0211      	lsls	r1, r2, #8
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6952      	ldr	r2, [r2, #20]
 8002334:	0852      	lsrs	r2, r2, #1
 8002336:	3a01      	subs	r2, #1
 8002338:	0652      	lsls	r2, r2, #25
 800233a:	430a      	orrs	r2, r1
 800233c:	4915      	ldr	r1, [pc, #84]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800233e:	4313      	orrs	r3, r2
 8002340:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002342:	4b14      	ldr	r3, [pc, #80]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a13      	ldr	r2, [pc, #76]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002348:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800234c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7fe fb5d 	bl	8000a0c <HAL_GetTick>
 8002352:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002354:	e009      	b.n	800236a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002356:	f7fe fb59 	bl	8000a0c <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d902      	bls.n	800236a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	73fb      	strb	r3, [r7, #15]
          break;
 8002368:	e005      	b.n	8002376 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800236a:	4b0a      	ldr	r3, [pc, #40]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0ef      	beq.n	8002356 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d106      	bne.n	800238a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800237c:	4b05      	ldr	r3, [pc, #20]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	4903      	ldr	r1, [pc, #12]	@ (8002394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002386:	4313      	orrs	r3, r2
 8002388:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000

08002398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e040      	b.n	800242c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe fa34 	bl	8000828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2224      	movs	r2, #36	@ 0x24
 80023c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0201 	bic.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fe04 	bl	8002fec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fbd5 	bl	8002b94 <UART_SetConfig>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e01b      	b.n	800242c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002402:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002412:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 fe83 	bl	8003130 <UART_CheckIdleState>
 800242a:	4603      	mov	r3, r0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08a      	sub	sp, #40	@ 0x28
 8002438:	af02      	add	r7, sp, #8
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	4613      	mov	r3, r2
 8002442:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002448:	2b20      	cmp	r3, #32
 800244a:	d177      	bne.n	800253c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <HAL_UART_Transmit+0x24>
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e070      	b.n	800253e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2221      	movs	r2, #33	@ 0x21
 8002468:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800246a:	f7fe facf 	bl	8000a0c <HAL_GetTick>
 800246e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	88fa      	ldrh	r2, [r7, #6]
 8002474:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	88fa      	ldrh	r2, [r7, #6]
 800247c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002488:	d108      	bne.n	800249c <HAL_UART_Transmit+0x68>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d104      	bne.n	800249c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	61bb      	str	r3, [r7, #24]
 800249a:	e003      	b.n	80024a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024a4:	e02f      	b.n	8002506 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2200      	movs	r2, #0
 80024ae:	2180      	movs	r1, #128	@ 0x80
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 fee5 	bl	8003280 <UART_WaitOnFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d004      	beq.n	80024c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2220      	movs	r2, #32
 80024c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e03b      	b.n	800253e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10b      	bne.n	80024e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	881a      	ldrh	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024d8:	b292      	uxth	r2, r2
 80024da:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	3302      	adds	r3, #2
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	e007      	b.n	80024f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	781a      	ldrb	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3301      	adds	r3, #1
 80024f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800250c:	b29b      	uxth	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1c9      	bne.n	80024a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2200      	movs	r2, #0
 800251a:	2140      	movs	r1, #64	@ 0x40
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 feaf 	bl	8003280 <UART_WaitOnFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d004      	beq.n	8002532 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e005      	b.n	800253e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	e000      	b.n	800253e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800253c:	2302      	movs	r3, #2
  }
}
 800253e:	4618      	mov	r0, r3
 8002540:	3720      	adds	r7, #32
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b0ba      	sub	sp, #232	@ 0xe8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800256e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002572:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002576:	4013      	ands	r3, r2
 8002578:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800257c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d115      	bne.n	80025b0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002588:	f003 0320 	and.w	r3, r3, #32
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00f      	beq.n	80025b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b00      	cmp	r3, #0
 800259a:	d009      	beq.n	80025b0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 82ca 	beq.w	8002b3a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	4798      	blx	r3
      }
      return;
 80025ae:	e2c4      	b.n	8002b3a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80025b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8117 	beq.w	80027e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80025ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80025c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80025ca:	4b85      	ldr	r3, [pc, #532]	@ (80027e0 <HAL_UART_IRQHandler+0x298>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 810a 	beq.w	80027e8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80025d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d011      	beq.n	8002604 <HAL_UART_IRQHandler+0xbc>
 80025e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00b      	beq.n	8002604 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2201      	movs	r2, #1
 80025f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025fa:	f043 0201 	orr.w	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d011      	beq.n	8002634 <HAL_UART_IRQHandler+0xec>
 8002610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00b      	beq.n	8002634 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2202      	movs	r2, #2
 8002622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800262a:	f043 0204 	orr.w	r2, r3, #4
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d011      	beq.n	8002664 <HAL_UART_IRQHandler+0x11c>
 8002640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00b      	beq.n	8002664 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2204      	movs	r2, #4
 8002652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800265a:	f043 0202 	orr.w	r2, r3, #2
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d017      	beq.n	80026a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b00      	cmp	r3, #0
 800267a:	d105      	bne.n	8002688 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800267c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002680:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00b      	beq.n	80026a0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2208      	movs	r2, #8
 800268e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002696:	f043 0208 	orr.w	r2, r3, #8
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80026a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d012      	beq.n	80026d2 <HAL_UART_IRQHandler+0x18a>
 80026ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00c      	beq.n	80026d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026c8:	f043 0220 	orr.w	r2, r3, #32
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 8230 	beq.w	8002b3e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80026de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00d      	beq.n	8002706 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80026ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800270c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271a:	2b40      	cmp	r3, #64	@ 0x40
 800271c:	d005      	beq.n	800272a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800271e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002722:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002726:	2b00      	cmp	r3, #0
 8002728:	d04f      	beq.n	80027ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fe15 	bl	800335a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800273a:	2b40      	cmp	r3, #64	@ 0x40
 800273c:	d141      	bne.n	80027c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3308      	adds	r3, #8
 8002744:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002748:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800274c:	e853 3f00 	ldrex	r3, [r3]
 8002750:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002754:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002758:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800275c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3308      	adds	r3, #8
 8002766:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800276a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800276e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002772:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002776:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800277a:	e841 2300 	strex	r3, r2, [r1]
 800277e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1d9      	bne.n	800273e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800278e:	2b00      	cmp	r3, #0
 8002790:	d013      	beq.n	80027ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002796:	4a13      	ldr	r2, [pc, #76]	@ (80027e4 <HAL_UART_IRQHandler+0x29c>)
 8002798:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fab3 	bl	8000d0a <HAL_DMA_Abort_IT>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d017      	beq.n	80027da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80027b4:	4610      	mov	r0, r2
 80027b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b8:	e00f      	b.n	80027da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f9d4 	bl	8002b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c0:	e00b      	b.n	80027da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f9d0 	bl	8002b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c8:	e007      	b.n	80027da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f9cc 	bl	8002b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80027d8:	e1b1      	b.n	8002b3e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027da:	bf00      	nop
    return;
 80027dc:	e1af      	b.n	8002b3e <HAL_UART_IRQHandler+0x5f6>
 80027de:	bf00      	nop
 80027e0:	04000120 	.word	0x04000120
 80027e4:	08003423 	.word	0x08003423

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	f040 816a 	bne.w	8002ac6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80027f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 8163 	beq.w	8002ac6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 815c 	beq.w	8002ac6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2210      	movs	r2, #16
 8002814:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002820:	2b40      	cmp	r3, #64	@ 0x40
 8002822:	f040 80d4 	bne.w	80029ce <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002832:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 80ad 	beq.w	8002996 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002846:	429a      	cmp	r2, r3
 8002848:	f080 80a5 	bcs.w	8002996 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002852:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b00      	cmp	r3, #0
 8002864:	f040 8086 	bne.w	8002974 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002870:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002874:	e853 3f00 	ldrex	r3, [r3]
 8002878:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800287c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002884:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002892:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002896:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800289e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80028a2:	e841 2300 	strex	r3, r2, [r1]
 80028a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80028aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1da      	bne.n	8002868 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	3308      	adds	r3, #8
 80028b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028bc:	e853 3f00 	ldrex	r3, [r3]
 80028c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80028c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028c4:	f023 0301 	bic.w	r3, r3, #1
 80028c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3308      	adds	r3, #8
 80028d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80028d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80028da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80028de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80028e2:	e841 2300 	strex	r3, r2, [r1]
 80028e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80028e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1e1      	bne.n	80028b2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	3308      	adds	r3, #8
 80028f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028f8:	e853 3f00 	ldrex	r3, [r3]
 80028fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80028fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002904:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3308      	adds	r3, #8
 800290e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002912:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002914:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002916:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002918:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800291a:	e841 2300 	strex	r3, r2, [r1]
 800291e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002920:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1e3      	bne.n	80028ee <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2220      	movs	r2, #32
 800292a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800293c:	e853 3f00 	ldrex	r3, [r3]
 8002940:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002944:	f023 0310 	bic.w	r3, r3, #16
 8002948:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002956:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002958:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800295c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800295e:	e841 2300 	strex	r3, r2, [r1]
 8002962:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1e4      	bne.n	8002934 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe f98d 	bl	8000c8e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002986:	b29b      	uxth	r3, r3
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	b29b      	uxth	r3, r3
 800298c:	4619      	mov	r1, r3
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f8f4 	bl	8002b7c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002994:	e0d5      	b.n	8002b42 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800299c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029a0:	429a      	cmp	r2, r3
 80029a2:	f040 80ce 	bne.w	8002b42 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	f040 80c5 	bne.w	8002b42 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80029c4:	4619      	mov	r1, r3
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f8d8 	bl	8002b7c <HAL_UARTEx_RxEventCallback>
      return;
 80029cc:	e0b9      	b.n	8002b42 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80029da:	b29b      	uxth	r3, r3
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80ab 	beq.w	8002b46 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80029f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80a6 	beq.w	8002b46 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a02:	e853 3f00 	ldrex	r3, [r3]
 8002a06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a24:	e841 2300 	strex	r3, r2, [r1]
 8002a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1e4      	bne.n	80029fa <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	3308      	adds	r3, #8
 8002a36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	e853 3f00 	ldrex	r3, [r3]
 8002a3e:	623b      	str	r3, [r7, #32]
   return(result);
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	f023 0301 	bic.w	r3, r3, #1
 8002a46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3308      	adds	r3, #8
 8002a50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002a54:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a5c:	e841 2300 	strex	r3, r2, [r1]
 8002a60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1e3      	bne.n	8002a30 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	e853 3f00 	ldrex	r3, [r3]
 8002a88:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f023 0310 	bic.w	r3, r3, #16
 8002a90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa2:	69b9      	ldr	r1, [r7, #24]
 8002aa4:	69fa      	ldr	r2, [r7, #28]
 8002aa6:	e841 2300 	strex	r3, r2, [r1]
 8002aaa:	617b      	str	r3, [r7, #20]
   return(result);
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1e4      	bne.n	8002a7c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002abc:	4619      	mov	r1, r3
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f85c 	bl	8002b7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ac4:	e03f      	b.n	8002b46 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00e      	beq.n	8002af0 <HAL_UART_IRQHandler+0x5a8>
 8002ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d008      	beq.n	8002af0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ae6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fcda 	bl	80034a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002aee:	e02d      	b.n	8002b4c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00e      	beq.n	8002b1a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01c      	beq.n	8002b4a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	4798      	blx	r3
    }
    return;
 8002b18:	e017      	b.n	8002b4a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d012      	beq.n	8002b4c <HAL_UART_IRQHandler+0x604>
 8002b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00c      	beq.n	8002b4c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fc8b 	bl	800344e <UART_EndTransmit_IT>
    return;
 8002b38:	e008      	b.n	8002b4c <HAL_UART_IRQHandler+0x604>
      return;
 8002b3a:	bf00      	nop
 8002b3c:	e006      	b.n	8002b4c <HAL_UART_IRQHandler+0x604>
    return;
 8002b3e:	bf00      	nop
 8002b40:	e004      	b.n	8002b4c <HAL_UART_IRQHandler+0x604>
      return;
 8002b42:	bf00      	nop
 8002b44:	e002      	b.n	8002b4c <HAL_UART_IRQHandler+0x604>
      return;
 8002b46:	bf00      	nop
 8002b48:	e000      	b.n	8002b4c <HAL_UART_IRQHandler+0x604>
    return;
 8002b4a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002b4c:	37e8      	adds	r7, #232	@ 0xe8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop

08002b54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b98:	b08a      	sub	sp, #40	@ 0x28
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4bb4      	ldr	r3, [pc, #720]	@ (8002e94 <UART_SetConfig+0x300>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4aa9      	ldr	r2, [pc, #676]	@ (8002e98 <UART_SetConfig+0x304>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d004      	beq.n	8002c00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c10:	430a      	orrs	r2, r1
 8002c12:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4aa0      	ldr	r2, [pc, #640]	@ (8002e9c <UART_SetConfig+0x308>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d126      	bne.n	8002c6c <UART_SetConfig+0xd8>
 8002c1e:	4ba0      	ldr	r3, [pc, #640]	@ (8002ea0 <UART_SetConfig+0x30c>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d81b      	bhi.n	8002c64 <UART_SetConfig+0xd0>
 8002c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c34 <UART_SetConfig+0xa0>)
 8002c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c32:	bf00      	nop
 8002c34:	08002c45 	.word	0x08002c45
 8002c38:	08002c55 	.word	0x08002c55
 8002c3c:	08002c4d 	.word	0x08002c4d
 8002c40:	08002c5d 	.word	0x08002c5d
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c4a:	e080      	b.n	8002d4e <UART_SetConfig+0x1ba>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c52:	e07c      	b.n	8002d4e <UART_SetConfig+0x1ba>
 8002c54:	2304      	movs	r3, #4
 8002c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c5a:	e078      	b.n	8002d4e <UART_SetConfig+0x1ba>
 8002c5c:	2308      	movs	r3, #8
 8002c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c62:	e074      	b.n	8002d4e <UART_SetConfig+0x1ba>
 8002c64:	2310      	movs	r3, #16
 8002c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c6a:	e070      	b.n	8002d4e <UART_SetConfig+0x1ba>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a8c      	ldr	r2, [pc, #560]	@ (8002ea4 <UART_SetConfig+0x310>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d138      	bne.n	8002ce8 <UART_SetConfig+0x154>
 8002c76:	4b8a      	ldr	r3, [pc, #552]	@ (8002ea0 <UART_SetConfig+0x30c>)
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b0c      	cmp	r3, #12
 8002c82:	d82d      	bhi.n	8002ce0 <UART_SetConfig+0x14c>
 8002c84:	a201      	add	r2, pc, #4	@ (adr r2, 8002c8c <UART_SetConfig+0xf8>)
 8002c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8a:	bf00      	nop
 8002c8c:	08002cc1 	.word	0x08002cc1
 8002c90:	08002ce1 	.word	0x08002ce1
 8002c94:	08002ce1 	.word	0x08002ce1
 8002c98:	08002ce1 	.word	0x08002ce1
 8002c9c:	08002cd1 	.word	0x08002cd1
 8002ca0:	08002ce1 	.word	0x08002ce1
 8002ca4:	08002ce1 	.word	0x08002ce1
 8002ca8:	08002ce1 	.word	0x08002ce1
 8002cac:	08002cc9 	.word	0x08002cc9
 8002cb0:	08002ce1 	.word	0x08002ce1
 8002cb4:	08002ce1 	.word	0x08002ce1
 8002cb8:	08002ce1 	.word	0x08002ce1
 8002cbc:	08002cd9 	.word	0x08002cd9
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cc6:	e042      	b.n	8002d4e <UART_SetConfig+0x1ba>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cce:	e03e      	b.n	8002d4e <UART_SetConfig+0x1ba>
 8002cd0:	2304      	movs	r3, #4
 8002cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cd6:	e03a      	b.n	8002d4e <UART_SetConfig+0x1ba>
 8002cd8:	2308      	movs	r3, #8
 8002cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cde:	e036      	b.n	8002d4e <UART_SetConfig+0x1ba>
 8002ce0:	2310      	movs	r3, #16
 8002ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ce6:	e032      	b.n	8002d4e <UART_SetConfig+0x1ba>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a6a      	ldr	r2, [pc, #424]	@ (8002e98 <UART_SetConfig+0x304>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d12a      	bne.n	8002d48 <UART_SetConfig+0x1b4>
 8002cf2:	4b6b      	ldr	r3, [pc, #428]	@ (8002ea0 <UART_SetConfig+0x30c>)
 8002cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002cfc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d00:	d01a      	beq.n	8002d38 <UART_SetConfig+0x1a4>
 8002d02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d06:	d81b      	bhi.n	8002d40 <UART_SetConfig+0x1ac>
 8002d08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d0c:	d00c      	beq.n	8002d28 <UART_SetConfig+0x194>
 8002d0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d12:	d815      	bhi.n	8002d40 <UART_SetConfig+0x1ac>
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <UART_SetConfig+0x18c>
 8002d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d1c:	d008      	beq.n	8002d30 <UART_SetConfig+0x19c>
 8002d1e:	e00f      	b.n	8002d40 <UART_SetConfig+0x1ac>
 8002d20:	2300      	movs	r3, #0
 8002d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d26:	e012      	b.n	8002d4e <UART_SetConfig+0x1ba>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d2e:	e00e      	b.n	8002d4e <UART_SetConfig+0x1ba>
 8002d30:	2304      	movs	r3, #4
 8002d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d36:	e00a      	b.n	8002d4e <UART_SetConfig+0x1ba>
 8002d38:	2308      	movs	r3, #8
 8002d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d3e:	e006      	b.n	8002d4e <UART_SetConfig+0x1ba>
 8002d40:	2310      	movs	r3, #16
 8002d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d46:	e002      	b.n	8002d4e <UART_SetConfig+0x1ba>
 8002d48:	2310      	movs	r3, #16
 8002d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a51      	ldr	r2, [pc, #324]	@ (8002e98 <UART_SetConfig+0x304>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d17a      	bne.n	8002e4e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d824      	bhi.n	8002daa <UART_SetConfig+0x216>
 8002d60:	a201      	add	r2, pc, #4	@ (adr r2, 8002d68 <UART_SetConfig+0x1d4>)
 8002d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d66:	bf00      	nop
 8002d68:	08002d8d 	.word	0x08002d8d
 8002d6c:	08002dab 	.word	0x08002dab
 8002d70:	08002d95 	.word	0x08002d95
 8002d74:	08002dab 	.word	0x08002dab
 8002d78:	08002d9b 	.word	0x08002d9b
 8002d7c:	08002dab 	.word	0x08002dab
 8002d80:	08002dab 	.word	0x08002dab
 8002d84:	08002dab 	.word	0x08002dab
 8002d88:	08002da3 	.word	0x08002da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d8c:	f7fe ff90 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 8002d90:	61f8      	str	r0, [r7, #28]
        break;
 8002d92:	e010      	b.n	8002db6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d94:	4b44      	ldr	r3, [pc, #272]	@ (8002ea8 <UART_SetConfig+0x314>)
 8002d96:	61fb      	str	r3, [r7, #28]
        break;
 8002d98:	e00d      	b.n	8002db6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d9a:	f7fe fef1 	bl	8001b80 <HAL_RCC_GetSysClockFreq>
 8002d9e:	61f8      	str	r0, [r7, #28]
        break;
 8002da0:	e009      	b.n	8002db6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002da2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002da6:	61fb      	str	r3, [r7, #28]
        break;
 8002da8:	e005      	b.n	8002db6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002db4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8107 	beq.w	8002fcc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d305      	bcc.n	8002dda <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d903      	bls.n	8002de2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002de0:	e0f4      	b.n	8002fcc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	2200      	movs	r2, #0
 8002de6:	461c      	mov	r4, r3
 8002de8:	4615      	mov	r5, r2
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	022b      	lsls	r3, r5, #8
 8002df4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002df8:	0222      	lsls	r2, r4, #8
 8002dfa:	68f9      	ldr	r1, [r7, #12]
 8002dfc:	6849      	ldr	r1, [r1, #4]
 8002dfe:	0849      	lsrs	r1, r1, #1
 8002e00:	2000      	movs	r0, #0
 8002e02:	4688      	mov	r8, r1
 8002e04:	4681      	mov	r9, r0
 8002e06:	eb12 0a08 	adds.w	sl, r2, r8
 8002e0a:	eb43 0b09 	adc.w	fp, r3, r9
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	603b      	str	r3, [r7, #0]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e1c:	4650      	mov	r0, sl
 8002e1e:	4659      	mov	r1, fp
 8002e20:	f7fd f9d4 	bl	80001cc <__aeabi_uldivmod>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4613      	mov	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e32:	d308      	bcc.n	8002e46 <UART_SetConfig+0x2b2>
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e3a:	d204      	bcs.n	8002e46 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	60da      	str	r2, [r3, #12]
 8002e44:	e0c2      	b.n	8002fcc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002e4c:	e0be      	b.n	8002fcc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e56:	d16a      	bne.n	8002f2e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002e58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d834      	bhi.n	8002eca <UART_SetConfig+0x336>
 8002e60:	a201      	add	r2, pc, #4	@ (adr r2, 8002e68 <UART_SetConfig+0x2d4>)
 8002e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e66:	bf00      	nop
 8002e68:	08002e8d 	.word	0x08002e8d
 8002e6c:	08002ead 	.word	0x08002ead
 8002e70:	08002eb5 	.word	0x08002eb5
 8002e74:	08002ecb 	.word	0x08002ecb
 8002e78:	08002ebb 	.word	0x08002ebb
 8002e7c:	08002ecb 	.word	0x08002ecb
 8002e80:	08002ecb 	.word	0x08002ecb
 8002e84:	08002ecb 	.word	0x08002ecb
 8002e88:	08002ec3 	.word	0x08002ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e8c:	f7fe ff10 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 8002e90:	61f8      	str	r0, [r7, #28]
        break;
 8002e92:	e020      	b.n	8002ed6 <UART_SetConfig+0x342>
 8002e94:	efff69f3 	.word	0xefff69f3
 8002e98:	40008000 	.word	0x40008000
 8002e9c:	40013800 	.word	0x40013800
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40004400 	.word	0x40004400
 8002ea8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002eac:	f7fe ff16 	bl	8001cdc <HAL_RCC_GetPCLK2Freq>
 8002eb0:	61f8      	str	r0, [r7, #28]
        break;
 8002eb2:	e010      	b.n	8002ed6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eb4:	4b4c      	ldr	r3, [pc, #304]	@ (8002fe8 <UART_SetConfig+0x454>)
 8002eb6:	61fb      	str	r3, [r7, #28]
        break;
 8002eb8:	e00d      	b.n	8002ed6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eba:	f7fe fe61 	bl	8001b80 <HAL_RCC_GetSysClockFreq>
 8002ebe:	61f8      	str	r0, [r7, #28]
        break;
 8002ec0:	e009      	b.n	8002ed6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ec6:	61fb      	str	r3, [r7, #28]
        break;
 8002ec8:	e005      	b.n	8002ed6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ed4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d077      	beq.n	8002fcc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	005a      	lsls	r2, r3, #1
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	085b      	lsrs	r3, r3, #1
 8002ee6:	441a      	add	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	2b0f      	cmp	r3, #15
 8002ef6:	d916      	bls.n	8002f26 <UART_SetConfig+0x392>
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002efe:	d212      	bcs.n	8002f26 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	f023 030f 	bic.w	r3, r3, #15
 8002f08:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	085b      	lsrs	r3, r3, #1
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	8afb      	ldrh	r3, [r7, #22]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	8afa      	ldrh	r2, [r7, #22]
 8002f22:	60da      	str	r2, [r3, #12]
 8002f24:	e052      	b.n	8002fcc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002f2c:	e04e      	b.n	8002fcc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d827      	bhi.n	8002f86 <UART_SetConfig+0x3f2>
 8002f36:	a201      	add	r2, pc, #4	@ (adr r2, 8002f3c <UART_SetConfig+0x3a8>)
 8002f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3c:	08002f61 	.word	0x08002f61
 8002f40:	08002f69 	.word	0x08002f69
 8002f44:	08002f71 	.word	0x08002f71
 8002f48:	08002f87 	.word	0x08002f87
 8002f4c:	08002f77 	.word	0x08002f77
 8002f50:	08002f87 	.word	0x08002f87
 8002f54:	08002f87 	.word	0x08002f87
 8002f58:	08002f87 	.word	0x08002f87
 8002f5c:	08002f7f 	.word	0x08002f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f60:	f7fe fea6 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 8002f64:	61f8      	str	r0, [r7, #28]
        break;
 8002f66:	e014      	b.n	8002f92 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f68:	f7fe feb8 	bl	8001cdc <HAL_RCC_GetPCLK2Freq>
 8002f6c:	61f8      	str	r0, [r7, #28]
        break;
 8002f6e:	e010      	b.n	8002f92 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f70:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe8 <UART_SetConfig+0x454>)
 8002f72:	61fb      	str	r3, [r7, #28]
        break;
 8002f74:	e00d      	b.n	8002f92 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f76:	f7fe fe03 	bl	8001b80 <HAL_RCC_GetSysClockFreq>
 8002f7a:	61f8      	str	r0, [r7, #28]
        break;
 8002f7c:	e009      	b.n	8002f92 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f82:	61fb      	str	r3, [r7, #28]
        break;
 8002f84:	e005      	b.n	8002f92 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002f90:	bf00      	nop
    }

    if (pclk != 0U)
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d019      	beq.n	8002fcc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	085a      	lsrs	r2, r3, #1
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	441a      	add	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002faa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b0f      	cmp	r3, #15
 8002fb0:	d909      	bls.n	8002fc6 <UART_SetConfig+0x432>
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fb8:	d205      	bcs.n	8002fc6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60da      	str	r2, [r3, #12]
 8002fc4:	e002      	b.n	8002fcc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002fd8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3728      	adds	r7, #40	@ 0x28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fe6:	bf00      	nop
 8002fe8:	00f42400 	.word	0x00f42400

08002fec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00a      	beq.n	8003016 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01a      	beq.n	8003102 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030ea:	d10a      	bne.n	8003102 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	605a      	str	r2, [r3, #4]
  }
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b098      	sub	sp, #96	@ 0x60
 8003134:	af02      	add	r7, sp, #8
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003140:	f7fd fc64 	bl	8000a0c <HAL_GetTick>
 8003144:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	2b08      	cmp	r3, #8
 8003152:	d12e      	bne.n	80031b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003154:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800315c:	2200      	movs	r2, #0
 800315e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f88c 	bl	8003280 <UART_WaitOnFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d021      	beq.n	80031b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003176:	e853 3f00 	ldrex	r3, [r3]
 800317a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800317c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003182:	653b      	str	r3, [r7, #80]	@ 0x50
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800318c:	647b      	str	r3, [r7, #68]	@ 0x44
 800318e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003190:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003192:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003194:	e841 2300 	strex	r3, r2, [r1]
 8003198:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800319a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e6      	bne.n	800316e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e062      	b.n	8003278 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d149      	bne.n	8003254 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031c8:	2200      	movs	r2, #0
 80031ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f856 	bl	8003280 <UART_WaitOnFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d03c      	beq.n	8003254 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e2:	e853 3f00 	ldrex	r3, [r3]
 80031e6:	623b      	str	r3, [r7, #32]
   return(result);
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80031fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003200:	e841 2300 	strex	r3, r2, [r1]
 8003204:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e6      	bne.n	80031da <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3308      	adds	r3, #8
 8003212:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	e853 3f00 	ldrex	r3, [r3]
 800321a:	60fb      	str	r3, [r7, #12]
   return(result);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3308      	adds	r3, #8
 800322a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800322c:	61fa      	str	r2, [r7, #28]
 800322e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	69b9      	ldr	r1, [r7, #24]
 8003232:	69fa      	ldr	r2, [r7, #28]
 8003234:	e841 2300 	strex	r3, r2, [r1]
 8003238:	617b      	str	r3, [r7, #20]
   return(result);
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e5      	bne.n	800320c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e011      	b.n	8003278 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2220      	movs	r2, #32
 800325e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3758      	adds	r7, #88	@ 0x58
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003290:	e04f      	b.n	8003332 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003298:	d04b      	beq.n	8003332 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329a:	f7fd fbb7 	bl	8000a0c <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d302      	bcc.n	80032b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e04e      	b.n	8003352 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d037      	beq.n	8003332 <UART_WaitOnFlagUntilTimeout+0xb2>
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b80      	cmp	r3, #128	@ 0x80
 80032c6:	d034      	beq.n	8003332 <UART_WaitOnFlagUntilTimeout+0xb2>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b40      	cmp	r3, #64	@ 0x40
 80032cc:	d031      	beq.n	8003332 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d110      	bne.n	80032fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2208      	movs	r2, #8
 80032e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f838 	bl	800335a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2208      	movs	r2, #8
 80032ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e029      	b.n	8003352 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003308:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800330c:	d111      	bne.n	8003332 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003316:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f81e 	bl	800335a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2220      	movs	r2, #32
 8003322:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e00f      	b.n	8003352 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4013      	ands	r3, r2
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	429a      	cmp	r2, r3
 8003340:	bf0c      	ite	eq
 8003342:	2301      	moveq	r3, #1
 8003344:	2300      	movne	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	429a      	cmp	r2, r3
 800334e:	d0a0      	beq.n	8003292 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800335a:	b480      	push	{r7}
 800335c:	b095      	sub	sp, #84	@ 0x54
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336a:	e853 3f00 	ldrex	r3, [r3]
 800336e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003372:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003380:	643b      	str	r3, [r7, #64]	@ 0x40
 8003382:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003384:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003386:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003388:	e841 2300 	strex	r3, r2, [r1]
 800338c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800338e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e6      	bne.n	8003362 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3308      	adds	r3, #8
 800339a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	e853 3f00 	ldrex	r3, [r3]
 80033a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3308      	adds	r3, #8
 80033b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033bc:	e841 2300 	strex	r3, r2, [r1]
 80033c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e5      	bne.n	8003394 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d118      	bne.n	8003402 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f023 0310 	bic.w	r3, r3, #16
 80033e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033ee:	61bb      	str	r3, [r7, #24]
 80033f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	6979      	ldr	r1, [r7, #20]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	613b      	str	r3, [r7, #16]
   return(result);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e6      	bne.n	80033d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003416:	bf00      	nop
 8003418:	3754      	adds	r7, #84	@ 0x54
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7ff fb91 	bl	8002b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b088      	sub	sp, #32
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	e853 3f00 	ldrex	r3, [r3]
 8003462:	60bb      	str	r3, [r7, #8]
   return(result);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800346a:	61fb      	str	r3, [r7, #28]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003478:	6979      	ldr	r1, [r7, #20]
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	e841 2300 	strex	r3, r2, [r1]
 8003480:	613b      	str	r3, [r7, #16]
   return(result);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e6      	bne.n	8003456 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2220      	movs	r2, #32
 800348c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff fb5d 	bl	8002b54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800349a:	bf00      	nop
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <memset>:
 80034b6:	4402      	add	r2, r0
 80034b8:	4603      	mov	r3, r0
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d100      	bne.n	80034c0 <memset+0xa>
 80034be:	4770      	bx	lr
 80034c0:	f803 1b01 	strb.w	r1, [r3], #1
 80034c4:	e7f9      	b.n	80034ba <memset+0x4>
	...

080034c8 <__libc_init_array>:
 80034c8:	b570      	push	{r4, r5, r6, lr}
 80034ca:	4d0d      	ldr	r5, [pc, #52]	@ (8003500 <__libc_init_array+0x38>)
 80034cc:	4c0d      	ldr	r4, [pc, #52]	@ (8003504 <__libc_init_array+0x3c>)
 80034ce:	1b64      	subs	r4, r4, r5
 80034d0:	10a4      	asrs	r4, r4, #2
 80034d2:	2600      	movs	r6, #0
 80034d4:	42a6      	cmp	r6, r4
 80034d6:	d109      	bne.n	80034ec <__libc_init_array+0x24>
 80034d8:	4d0b      	ldr	r5, [pc, #44]	@ (8003508 <__libc_init_array+0x40>)
 80034da:	4c0c      	ldr	r4, [pc, #48]	@ (800350c <__libc_init_array+0x44>)
 80034dc:	f000 f818 	bl	8003510 <_init>
 80034e0:	1b64      	subs	r4, r4, r5
 80034e2:	10a4      	asrs	r4, r4, #2
 80034e4:	2600      	movs	r6, #0
 80034e6:	42a6      	cmp	r6, r4
 80034e8:	d105      	bne.n	80034f6 <__libc_init_array+0x2e>
 80034ea:	bd70      	pop	{r4, r5, r6, pc}
 80034ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f0:	4798      	blx	r3
 80034f2:	3601      	adds	r6, #1
 80034f4:	e7ee      	b.n	80034d4 <__libc_init_array+0xc>
 80034f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034fa:	4798      	blx	r3
 80034fc:	3601      	adds	r6, #1
 80034fe:	e7f2      	b.n	80034e6 <__libc_init_array+0x1e>
 8003500:	08003778 	.word	0x08003778
 8003504:	08003778 	.word	0x08003778
 8003508:	08003778 	.word	0x08003778
 800350c:	0800377c 	.word	0x0800377c

08003510 <_init>:
 8003510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003512:	bf00      	nop
 8003514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003516:	bc08      	pop	{r3}
 8003518:	469e      	mov	lr, r3
 800351a:	4770      	bx	lr

0800351c <_fini>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	bf00      	nop
 8003520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003522:	bc08      	pop	{r3}
 8003524:	469e      	mov	lr, r3
 8003526:	4770      	bx	lr
